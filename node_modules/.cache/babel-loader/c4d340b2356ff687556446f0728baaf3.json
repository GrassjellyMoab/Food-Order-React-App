{"ast":null,"code":"var _jsxFileName = \"/Users/yanyixue/Desktop/HTML, CSS, JS/Learning react/Food-Order-App/src/components/Context/CartContextProvider.js\",\n    _s = $RefreshSig$();\n\nimport react, { useReducer } from \"react\";\nimport CartContext from \"./CartContext\"; // empty cart state to use as default value for state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n}; // reducer dispatch function to handle state\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    // get the updated total amount in the cart\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    console.log(state.items); // check if item already in cart by checking for the index\n\n    const existingCartItemIndex = state.items.findIndex(item => {\n      // check for when id of objects are same, then return index of this item if in cart\n      return -1;\n    }); // if item does not exist in cart then the existing cart index is null since index = -1\n\n    const existingCartItem = state.items[existingCartItemIndex]; // var to update item\n\n    let updatedItem; // var to update state arr items\n\n    let updatedItems; // if cart already has item\n\n    if (existingCartItem) {\n      // update item's amount property using a spread operator\n      updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items]; // updated the state snapshot\n\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } // if cart does not have the item\n    else {\n      updatedItem = { ...action.item\n      }; // add new item to cart\n\n      updatedItems = state.items.concat(updatedItem);\n    } // return the new updated state snapshot\n\n\n    return {\n      items: updatedItem,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  ;\n\n  if (action.type === \"REMOVE\") {}\n}; // main component in file\n\n\nconst CartContextProvider = props => {\n  _s();\n\n  // store items state in a reducer function\n  const [cartState, dispatchFunction] = useReducer(cartReducer, defaultCartState); // update cart state (addition) with arg of item to be added including quantity\n\n  const addItemToCartHandler = obj => {\n    dispatchFunction({\n      type: \"ADD\",\n      item: obj\n    });\n  }; // remove 1 item from cart at a time base on id\n\n\n  const removeItemFromCartHandler = id => {\n    dispatchFunction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: [],\n    totalAmount: 0,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartContextProvider, \"QVfWcayB8umTS/ND9nOIVsH67v4=\");\n\n_c = CartContextProvider;\nexport default CartContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartContextProvider\");","map":{"version":3,"sources":["/Users/yanyixue/Desktop/HTML, CSS, JS/Learning react/Food-Order-App/src/components/Context/CartContextProvider.js"],"names":["react","useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","console","log","existingCartItemIndex","findIndex","existingCartItem","updatedItem","updatedItems","concat","CartContextProvider","props","cartState","dispatchFunction","addItemToCartHandler","obj","removeItemFromCartHandler","id","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import react, { useReducer } from \"react\";\nimport CartContext from \"./CartContext\";\n\n// empty cart state to use as default value for state\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n};\n\n// reducer dispatch function to handle state\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    // get the updated total amount in the cart\n    const updatedTotalAmount =\n      state.totalAmount + action.item.price * action.item.amount;\n\n      console.log(state.items);\n    // check if item already in cart by checking for the index\n    const existingCartItemIndex = state.items.findIndex((item) => {\n      // check for when id of objects are same, then return index of this item if in cart\n      return -1;\n    });\n\n    // if item does not exist in cart then the existing cart index is null since index = -1\n    const existingCartItem = state.items[existingCartItemIndex];\n\n    // var to update item\n    let updatedItem;\n    // var to update state arr items\n    let updatedItems;\n\n    // if cart already has item\n    if (existingCartItem) {\n      // update item's amount property using a spread operator\n      updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount,\n      };\n      updatedItems = [\n        ...state.items,\n      ];\n      // updated the state snapshot\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n\n    // if cart does not have the item\n    else {\n        updatedItem = { ...action.item };\n        // add new item to cart\n        updatedItems = state.items.concat(updatedItem)\n    }\n    \n    // return the new updated state snapshot\n    return {\n        items: updatedItem,\n        totalAmount: updatedTotalAmount\n    }\n  };\n\n  if (action.type === \"REMOVE\") {\n  }\n};\n\n// main component in file\nconst CartContextProvider = (props) => {\n  // store items state in a reducer function\n  const [cartState, dispatchFunction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n\n  // update cart state (addition) with arg of item to be added including quantity\n  const addItemToCartHandler = (obj) => {\n    dispatchFunction({ type: \"ADD\", item: obj });\n  };\n\n  // remove 1 item from cart at a time base on id\n  const removeItemFromCartHandler = (id) => {\n    dispatchFunction({ type: \"REMOVE\", id: id });\n  };\n\n  const cartContext = {\n    items: [],\n    totalAmount: 0,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n  };\n\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartContextProvider;\n"]},"metadata":{},"sourceType":"module"}