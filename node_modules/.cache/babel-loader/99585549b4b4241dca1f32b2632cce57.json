{"ast":null,"code":"var _jsxFileName = \"/Users/yanyixue/Desktop/HTML, CSS, JS/Learning react/Food-Order-App/src/components/FoodPortion/FoodContext/FoodContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; // to retrieve food & quantity to be added from FoodItem component to Cart component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FoodContext = /*#__PURE__*/React.createContext({\n  updateFoodList: (FoodId, QuantityToAdd) => {},\n  FoodList: {\n    id: 0\n  }\n});\nexport const FoodContextProvider = props => {\n  _s();\n\n  const [FoodList, setFoodList] = useState([{\n    food: \"Sushi\",\n    details: \"Finest fish and veggies\",\n    id: \"A1\",\n    Quantity: 0,\n    Price: 22.99\n  }, {\n    food: \"Schnitzel\",\n    details: \"A german speciality!\",\n    id: \"A2\",\n    Quantity: 0,\n    Price: 16.5\n  }, {\n    food: \"Barbecue Burger\",\n    details: \"American, raw, meaty\",\n    id: \"A3\",\n    Quantity: 0,\n    Price: 12.99\n  }, {\n    food: \"Green Bowl\",\n    details: \"Healthy...and green...\",\n    id: \"A4\",\n    Quantity: 0,\n    Price: 18.99\n  }]); // function to update FoodListstate\n\n  const updateFoodList = (FoodId, QuantityToAdd) => {\n    setFoodList(prev => {\n      // add quantity to be added to cart\n      // iterate through object to check whether key match id and then update the value\n      for (var i in prev) {\n        if (prev[i].id === FoodId && prev[i].Quantity >= 0) {\n          // update quantity of a certain Food in the Cart base on Id\n          prev[i].Quantity += +QuantityToAdd;\n          console.log(prev[i]);\n        }\n      }\n\n      return prev;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(FoodContext.Provider, {\n    value: {\n      updateFoodList: updateFoodList,\n      FoodList: FoodList\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FoodContextProvider, \"6uIh92otIhmeT3SymQBmUPZx5Jc=\");\n\n_c = FoodContextProvider;\nexport default FoodContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"FoodContextProvider\");","map":{"version":3,"sources":["/Users/yanyixue/Desktop/HTML, CSS, JS/Learning react/Food-Order-App/src/components/FoodPortion/FoodContext/FoodContext.js"],"names":["React","useState","FoodContext","createContext","updateFoodList","FoodId","QuantityToAdd","FoodList","id","FoodContextProvider","props","setFoodList","food","details","Quantity","Price","prev","i","console","log","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;;;AACA,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB;AACtCC,EAAAA,cAAc,EAAE,CAACC,MAAD,EAASC,aAAT,KAA2B,CAAE,CADP;AAEtCC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,EAAE,EAAE;AAAN;AAF4B,CAApB,CAApB;AAKA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC5C,QAAM,CAACH,QAAD,EAAWI,WAAX,IAA0BV,QAAQ,CAAC,CACvC;AACEW,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,OAAO,EAAE,yBAFX;AAGEL,IAAAA,EAAE,EAAE,IAHN;AAIEM,IAAAA,QAAQ,EAAE,CAJZ;AAKEC,IAAAA,KAAK,EAAE;AALT,GADuC,EAQvC;AACEH,IAAAA,IAAI,EAAE,WADR;AAEEC,IAAAA,OAAO,EAAE,sBAFX;AAGEL,IAAAA,EAAE,EAAE,IAHN;AAIEM,IAAAA,QAAQ,EAAE,CAJZ;AAKEC,IAAAA,KAAK,EAAE;AALT,GARuC,EAevC;AACEH,IAAAA,IAAI,EAAE,iBADR;AAEEC,IAAAA,OAAO,EAAE,sBAFX;AAGEL,IAAAA,EAAE,EAAE,IAHN;AAIEM,IAAAA,QAAQ,EAAE,CAJZ;AAKEC,IAAAA,KAAK,EAAE;AALT,GAfuC,EAsBvC;AACEH,IAAAA,IAAI,EAAE,YADR;AAEEC,IAAAA,OAAO,EAAE,wBAFX;AAGEL,IAAAA,EAAE,EAAE,IAHN;AAIEM,IAAAA,QAAQ,EAAE,CAJZ;AAKEC,IAAAA,KAAK,EAAE;AALT,GAtBuC,CAAD,CAAxC,CAD4C,CAgC5C;;AACA,QAAMX,cAAc,GAAG,CAACC,MAAD,EAASC,aAAT,KAA2B;AAChDK,IAAAA,WAAW,CAAEK,IAAD,IAAU;AACpB;AACA;AACA,WAAK,IAAIC,CAAT,IAAcD,IAAd,EAAoB;AAClB,YAAIA,IAAI,CAACC,CAAD,CAAJ,CAAQT,EAAR,KAAeH,MAAf,IAAyBW,IAAI,CAACC,CAAD,CAAJ,CAAQH,QAAR,IAAoB,CAAjD,EAAoD;AAClD;AACAE,UAAAA,IAAI,CAACC,CAAD,CAAJ,CAAQH,QAAR,IAAoB,CAACR,aAArB;AACAY,UAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACC,CAAD,CAAhB;AACD;AACF;;AACD,aAAOD,IAAP;AACD,KAXU,CAAX;AAYD,GAbD;;AAeA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLZ,MAAAA,cAAc,EAAEA,cADX;AAELG,MAAAA,QAAQ,EAAEA;AAFL,KADT;AAAA,cAMGG,KAAK,CAACU;AANT;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA1DM;;GAAMX,mB;;KAAAA,mB;AA4Db,eAAeP,WAAf","sourcesContent":["import React, { useState } from \"react\";\n\n// to retrieve food & quantity to be added from FoodItem component to Cart component\nconst FoodContext = React.createContext({\n  updateFoodList: (FoodId, QuantityToAdd) => {},\n  FoodList: { id: 0 },\n});\n\nexport const FoodContextProvider = (props) => {\n  const [FoodList, setFoodList] = useState([\n    {\n      food: \"Sushi\",\n      details: \"Finest fish and veggies\",\n      id: \"A1\",\n      Quantity: 0,\n      Price: 22.99,\n    },\n    {\n      food: \"Schnitzel\",\n      details: \"A german speciality!\",\n      id: \"A2\",\n      Quantity: 0,\n      Price: 16.5,\n    },\n    {\n      food: \"Barbecue Burger\",\n      details: \"American, raw, meaty\",\n      id: \"A3\",\n      Quantity: 0,\n      Price: 12.99,\n    },\n    {\n      food: \"Green Bowl\",\n      details: \"Healthy...and green...\",\n      id: \"A4\",\n      Quantity: 0,\n      Price: 18.99,\n    },\n  ]);\n\n  // function to update FoodListstate\n  const updateFoodList = (FoodId, QuantityToAdd) => {\n    setFoodList((prev) => {\n      // add quantity to be added to cart\n      // iterate through object to check whether key match id and then update the value\n      for (var i in prev) {\n        if (prev[i].id === FoodId && prev[i].Quantity >= 0) {\n          // update quantity of a certain Food in the Cart base on Id\n          prev[i].Quantity += +QuantityToAdd;\n          console.log(prev[i]);\n        }\n      }\n      return prev;\n    });\n  };\n\n  return (\n    <FoodContext.Provider\n      value={{\n        updateFoodList: updateFoodList,\n        FoodList: FoodList,\n      }}\n    >\n      {props.children}\n    </FoodContext.Provider>\n  );\n};\n\nexport default FoodContext;\n"]},"metadata":{},"sourceType":"module"}