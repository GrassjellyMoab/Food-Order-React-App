{"ast":null,"code":"var _jsxFileName = \"/Users/yanyixue/Desktop/HTML, CSS, JS/Learning react/Food-Order-App/src/components/Food/Food.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport FoodItem from \"../FoodItem/FoodItem\";\nimport FoodContext from \"../FoodContext/FoodContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Food = props => {\n  _s();\n\n  // context to get function to retrieve food id and value\n  const ctx = useContext(FoodContext); // arr of foods stored in a state so that the quantity can be updated\n\n  const [foodList, setFoodList] = useState([{\n    food: \"Sushi\",\n    details: \"Finest fish and veggies\",\n    price: \"22.99\",\n    quantity: 1,\n    id: \"A1\"\n  }, {\n    food: \"Schnitzel\",\n    details: \"A german speciality!\",\n    price: \"16.50\",\n    quantity: 1,\n    id: \"A2\"\n  }, {\n    food: \"Barbecue Burger\",\n    details: \"American, raw, meaty\",\n    price: \"12.99\",\n    quantity: 1,\n    id: \"A3\"\n  }, {\n    food: \"Green Bowl\",\n    details: \"Healthy...and green...\",\n    price: \"18.99\",\n    quantity: 1,\n    id: \"A4\"\n  }]); // function to retrieve food name and compare against food then add the input\n\n  const retrieveDetails = (quantityToAdd, foodId) => {\n    ctx.updateFoodToAdd(foodId, quantityToAdd);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: foodList.map(item => {\n        return /*#__PURE__*/_jsxDEV(FoodItem, {\n          food: item.food,\n          details: item.details,\n          price: item.price,\n          quantity: item.quantity,\n          retrieve: retrieveDetails,\n          id: item.id\n        }, Math.random().toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Food, \"upeFODed/jH5n+wPXz7t31M6qpI=\");\n\n_c = Food;\nexport default Food;\n\nvar _c;\n\n$RefreshReg$(_c, \"Food\");","map":{"version":3,"sources":["/Users/yanyixue/Desktop/HTML, CSS, JS/Learning react/Food-Order-App/src/components/Food/Food.js"],"names":["React","useState","useContext","Card","FoodItem","FoodContext","Food","props","ctx","foodList","setFoodList","food","details","price","quantity","id","retrieveDetails","quantityToAdd","foodId","updateFoodToAdd","map","item","Math","random","toString"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA2BC,UAA3B,QAA4C,OAA5C;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AACtB;AACA,QAAMC,GAAG,GAAGN,UAAU,CAACG,WAAD,CAAtB,CAFsB,CAItB;;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,CACvC;AACEU,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,OAAO,EAAE,yBAFX;AAGEC,IAAAA,KAAK,EAAE,OAHT;AAIEC,IAAAA,QAAQ,EAAE,CAJZ;AAKEC,IAAAA,EAAE,EAAE;AALN,GADuC,EAQvC;AACEJ,IAAAA,IAAI,EAAE,WADR;AAEEC,IAAAA,OAAO,EAAE,sBAFX;AAGEC,IAAAA,KAAK,EAAE,OAHT;AAIEC,IAAAA,QAAQ,EAAE,CAJZ;AAKEC,IAAAA,EAAE,EAAE;AALN,GARuC,EAevC;AACEJ,IAAAA,IAAI,EAAE,iBADR;AAEEC,IAAAA,OAAO,EAAE,sBAFX;AAGEC,IAAAA,KAAK,EAAE,OAHT;AAIEC,IAAAA,QAAQ,EAAE,CAJZ;AAKEC,IAAAA,EAAE,EAAE;AALN,GAfuC,EAsBvC;AACEJ,IAAAA,IAAI,EAAE,YADR;AAEEC,IAAAA,OAAO,EAAE,wBAFX;AAGEC,IAAAA,KAAK,EAAE,OAHT;AAIEC,IAAAA,QAAQ,EAAE,CAJZ;AAKEC,IAAAA,EAAE,EAAE;AALN,GAtBuC,CAAD,CAAxC,CALsB,CAoCtB;;AACA,QAAMC,eAAe,GAAG,CAACC,aAAD,EAAgBC,MAAhB,KAA2B;AACjDV,IAAAA,GAAG,CAACW,eAAJ,CAAoBD,MAApB,EAA4BD,aAA5B;AACD,GAFD;;AAIA,sBACE,QAAC,IAAD;AAAA,2BACE;AAAA,gBACGR,QAAQ,CAACW,GAAT,CAAcC,IAAD,IAAU;AACtB,4BACE,QAAC,QAAD;AACE,UAAA,IAAI,EAAEA,IAAI,CAACV,IADb;AAEE,UAAA,OAAO,EAAEU,IAAI,CAACT,OAFhB;AAGE,UAAA,KAAK,EAAES,IAAI,CAACR,KAHd;AAIE,UAAA,QAAQ,EAAEQ,IAAI,CAACP,QAJjB;AAME,UAAA,QAAQ,EAAEE,eANZ;AAOE,UAAA,EAAE,EAAEK,IAAI,CAACN;AAPX,WAKOO,IAAI,CAACC,MAAL,GAAcC,QAAd,EALP;AAAA;AAAA;AAAA;AAAA,gBADF;AAWD,OAZA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CA5DD;;GAAMlB,I;;KAAAA,I;AA8DN,eAAeA,IAAf","sourcesContent":["import React, { useState , useContext} from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport FoodItem from \"../FoodItem/FoodItem\";\nimport FoodContext from \"../FoodContext/FoodContext\";\n\nconst Food = (props) => {\n  // context to get function to retrieve food id and value\n  const ctx = useContext(FoodContext);\n\n  // arr of foods stored in a state so that the quantity can be updated\n  const [foodList, setFoodList] = useState([\n    {\n      food: \"Sushi\",\n      details: \"Finest fish and veggies\",\n      price: \"22.99\",\n      quantity: 1,\n      id: \"A1\",\n    },\n    {\n      food: \"Schnitzel\",\n      details: \"A german speciality!\",\n      price: \"16.50\",\n      quantity: 1,\n      id: \"A2\",\n    },\n    {\n      food: \"Barbecue Burger\",\n      details: \"American, raw, meaty\",\n      price: \"12.99\",\n      quantity: 1,\n      id: \"A3\",\n    },\n    {\n      food: \"Green Bowl\",\n      details: \"Healthy...and green...\",\n      price: \"18.99\",\n      quantity: 1,\n      id: \"A4\",\n    },\n  ]);\n\n  // function to retrieve food name and compare against food then add the input\n  const retrieveDetails = (quantityToAdd, foodId) => {\n    ctx.updateFoodToAdd(foodId, quantityToAdd)\n  };\n\n  return (\n    <Card>\n      <ul>\n        {foodList.map((item) => {\n          return (\n            <FoodItem\n              food={item.food}\n              details={item.details}\n              price={item.price}\n              quantity={item.quantity}\n              key={Math.random().toString()}\n              retrieve={retrieveDetails}\n              id={item.id}\n            ></FoodItem>\n          );\n        })}\n      </ul>\n    </Card>\n  );\n};\n\nexport default Food;\n"]},"metadata":{},"sourceType":"module"}