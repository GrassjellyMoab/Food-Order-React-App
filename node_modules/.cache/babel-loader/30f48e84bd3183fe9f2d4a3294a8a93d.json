{"ast":null,"code":"import _slicedToArray from\"/Users/yanyixue/Desktop/HTML, CSS, JS/Learning react/Food-Order-App/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _toConsumableArray from\"/Users/yanyixue/Desktop/HTML, CSS, JS/Learning react/Food-Order-App/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"/Users/yanyixue/Desktop/HTML, CSS, JS/Learning react/Food-Order-App/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useReducer}from\"react\";import CartContext from\"./CartContext\";// empty cart state to use as default value for state\nimport{jsx as _jsx}from\"react/jsx-runtime\";var defaultCartState={items:[],totalAmount:0};// reducer dispatch function to handle state\nvar cartReducer=function cartReducer(state,action){if(action.type===\"ADD\"){// get the updated total amount in the cart\nvar updatedTotalAmount=state.totalAmount+action.item.price*action.item.amount;// check if item already in cart by checking for the index\nvar existingCartItemIndex=state.items.findIndex(function(item){// check for when id of objects are same, then return index of this item if in cart\nreturn item.id===action.item.id;});// if item does not exist in cart then the existing cart index is null since index = -1\nvar existingCartItem=state.items[existingCartItemIndex];// var to update item\nvar updatedItem;// var to update state arr items\nvar updatedItems;// if cart already has item\nif(existingCartItem){// update item's amount property using a spread operator\nupdatedItem=_objectSpread(_objectSpread({},existingCartItem),{},{amount:existingCartItem.amount+action.item.amount});updatedItems=_toConsumableArray(state.items);// updated the state snapshot\nupdatedItems[existingCartItemIndex]=updatedItem;}// if cart does not have the item\nelse{updatedItem=_objectSpread({},action.item);// add new item to cart\nupdatedItems=state.items.concat(updatedItem);}// return the new updated state snapshot\nreturn{items:updatedItems,totalAmount:updatedTotalAmount};}if(action.type===\"REMOVE\"){// find index of item by comparing the id\nvar _existingCartItemIndex=state.items.findIndex(function(item){return item.id===action.id;});var existingItem=state.items[_existingCartItemIndex];// get new total updated price\nvar newTotalAmount=state.totalAmount-existingItem.price;var _updatedItems;// if last item in cart and to be removed,\nif(existingItem.amount===1){_updatedItems=state.items.filter(function(item){return item.id!==action.id;});}// remove 1 quantity of the item from cart\nelse{var _updatedItem=_objectSpread(_objectSpread({},existingItem),{},{amount:existingItem.amount-1});_updatedItems=_toConsumableArray(state.items);_updatedItems[_existingCartItemIndex]=_updatedItem;}return{items:_updatedItems,totalAmount:newTotalAmount};}};// main component in file\nvar CartContextProvider=function CartContextProvider(props){// store items state in a reducer function\nvar _useReducer=useReducer(cartReducer,defaultCartState),_useReducer2=_slicedToArray(_useReducer,2),cartState=_useReducer2[0],dispatchFunction=_useReducer2[1];// update cart state (addition) with arg of item to be added including quantity\nvar addItemToCartHandler=function addItemToCartHandler(obj){dispatchFunction({type:\"ADD\",item:obj});};// remove 1 item from cart at a time base on id\nvar removeItemFromCartHandler=function removeItemFromCartHandler(id){dispatchFunction({type:\"REMOVE\",id:id});};var cartContext={items:cartState.items,totalAmount:cartState.totalAmount,addItem:addItemToCartHandler,removeItem:removeItemFromCartHandler};return/*#__PURE__*/_jsx(CartContext.Provider,{value:cartContext,children:props.children});};export default CartContextProvider;","map":{"version":3,"sources":["/Users/yanyixue/Desktop/HTML, CSS, JS/Learning react/Food-Order-App/src/components/Context/CartContextProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItem","updatedItems","concat","existingItem","newTotalAmount","filter","CartContextProvider","props","cartState","dispatchFunction","addItemToCartHandler","obj","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import { useReducer } from \"react\";\nimport CartContext from \"./CartContext\";\n\n// empty cart state to use as default value for state\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n};\n\n// reducer dispatch function to handle state\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    // get the updated total amount in the cart\n    const updatedTotalAmount =\n      state.totalAmount + action.item.price * action.item.amount;\n\n    // check if item already in cart by checking for the index\n    const existingCartItemIndex = state.items.findIndex((item) => {\n      // check for when id of objects are same, then return index of this item if in cart\n      return item.id === action.item.id;\n    });\n\n    // if item does not exist in cart then the existing cart index is null since index = -1\n    const existingCartItem = state.items[existingCartItemIndex];\n\n    // var to update item\n    let updatedItem;\n    // var to update state arr items\n    let updatedItems;\n\n    // if cart already has item\n    if (existingCartItem) {\n      // update item's amount property using a spread operator\n      updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount,\n      };\n      updatedItems = [\n        ...state.items,\n      ];\n      // updated the state snapshot\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n\n    // if cart does not have the item\n    else {\n        updatedItem = { ...action.item };\n        // add new item to cart\n        updatedItems = state.items.concat(updatedItem)\n    }\n\n    // return the new updated state snapshot\n    return {\n        items: updatedItems,\n        totalAmount: updatedTotalAmount\n    }\n  }\n\n  if (action.type === \"REMOVE\") {\n    // find index of item by comparing the id\n    const existingCartItemIndex = state.items.findIndex((item) => {\n      return item.id === action.id;\n    })\n  ;\n    const existingItem = state.items[existingCartItemIndex];\n    // get new total updated price\n    const newTotalAmount = state.totalAmount - existingItem.price;\n\n    let updatedItems;\n\n    // if last item in cart and to be removed,\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter((item) => {\n        return item.id !== action.id;\n      })\n    }\n    \n    // remove 1 quantity of the item from cart\n    else {\n      const updatedItem = {...existingItem, amount: existingItem.amount - 1};\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: newTotalAmount\n    }\n  }\n};\n\n// main component in file\nconst CartContextProvider = (props) => {\n  // store items state in a reducer function\n  const [cartState, dispatchFunction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n\n  // update cart state (addition) with arg of item to be added including quantity\n  const addItemToCartHandler = (obj) => {\n    dispatchFunction({ type: \"ADD\", item: obj });\n  };\n\n  // remove 1 item from cart at a time base on id\n  const removeItemFromCartHandler = (id) => {\n    dispatchFunction({ type: \"REMOVE\", id: id });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n  };\n\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartContextProvider;\n"]},"metadata":{},"sourceType":"module"}