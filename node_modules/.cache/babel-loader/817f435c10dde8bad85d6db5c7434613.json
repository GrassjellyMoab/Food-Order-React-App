{"ast":null,"code":"var _jsxFileName = \"/Users/yanyixue/Desktop/HTML, CSS, JS/Learning react/Food-Order-App/src/components/Context/CartContextProvider.js\",\n    _s = $RefreshSig$();\n\nimport react, { useReducer } from \"react\";\nimport CartContext from \"./CartContext\"; // empty cart state to use as default value for state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n}; // reducer dispatch function to handle state\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {}\n\n  if (action.type === \"REMOVE\") {}\n}; // main component in file\n\n\nconst CartContextProvider = props => {\n  _s();\n\n  // store items state in a reducer function\n  const [cartState, dispatchFunction] = useReducer(cartReducer, defaultCartState); // update cart state (addition) with arg of item to be added including quantity\n\n  const addItemToCartHandler = item => {\n    dispatchFunction({\n      type: \"ADD\",\n      item: item\n    });\n  }; // remove 1 item from cart at a time base on id\n\n\n  const removeItemFromCartHandler = id => {\n    dispatchFunction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: [],\n    totalAmount: 0,\n    addItem: () => {},\n    removeItem: () => {}\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CartContextProvider, \"QVfWcayB8umTS/ND9nOIVsH67v4=\");\n\n_c = CartContextProvider;\nexport default CartContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartContextProvider\");","map":{"version":3,"sources":["/Users/yanyixue/Desktop/HTML, CSS, JS/Learning react/Food-Order-App/src/components/Context/CartContextProvider.js"],"names":["react","useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","CartContextProvider","props","cartState","dispatchFunction","addItemToCartHandler","item","removeItemFromCartHandler","id","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CAEA;;;AACA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAE,EADc;AAErBC,EAAAA,WAAW,EAAE;AAFQ,CAAzB,C,CAKA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B,CAE1B;;AAED,MAAID,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B,CAE7B;AACJ,CARD,C,CAUA;;;AACA,MAAMC,mBAAmB,GAAGC,KAAK,IAAI;AAAA;;AACjC;AACA,QAAM,CAACC,SAAD,EAAYC,gBAAZ,IAAgCZ,UAAU,CAACK,WAAD,EAAcH,gBAAd,CAAhD,CAFiC,CAKjC;;AACA,QAAMW,oBAAoB,GAAIC,IAAD,IAAU;AACnCF,IAAAA,gBAAgB,CAAC;AAACJ,MAAAA,IAAI,EAAE,KAAP;AAAcM,MAAAA,IAAI,EAAEA;AAApB,KAAD,CAAhB;AACH,GAFD,CANiC,CAUjC;;;AACA,QAAMC,yBAAyB,GAAIC,EAAD,IAAQ;AACtCJ,IAAAA,gBAAgB,CAAC;AAACJ,MAAAA,IAAI,EAAE,QAAP;AAAiBQ,MAAAA,EAAE,EAAEA;AAArB,KAAD,CAAhB;AACH,GAFD;;AAIA,QAAMC,WAAW,GAAG;AAChBd,IAAAA,KAAK,EAAE,EADS;AAEhBC,IAAAA,WAAW,EAAE,CAFG;AAGhBc,IAAAA,OAAO,EAAE,MAAM,CAAE,CAHD;AAIhBC,IAAAA,UAAU,EAAE,MAAM,CAAE;AAJJ,GAApB;AAOA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEF,WAA7B;AAAA,cACFP,KAAK,CAACU;AADJ;AAAA;AAAA;AAAA;AAAA,UAAP;AAGH,CAzBD;;GAAMX,mB;;KAAAA,mB;AA2BN,eAAeA,mBAAf","sourcesContent":["import react, { useReducer } from \"react\";\nimport CartContext from \"./CartContext\";\n\n// empty cart state to use as default value for state\nconst defaultCartState = {\n    items: [],\n    totalAmount: 0\n}\n\n// reducer dispatch function to handle state\nconst cartReducer = (state, action) => {\n    if (action.type === \"ADD\") {\n\n    }\n\n    if (action.type === \"REMOVE\") {\n        \n    }\n}\n\n// main component in file\nconst CartContextProvider = props => {\n    // store items state in a reducer function\n    const [cartState, dispatchFunction] = useReducer(cartReducer, defaultCartState)\n    \n\n    // update cart state (addition) with arg of item to be added including quantity\n    const addItemToCartHandler = (item) => {\n        dispatchFunction({type: \"ADD\", item: item})\n    }\n\n    // remove 1 item from cart at a time base on id\n    const removeItemFromCartHandler = (id) => {\n        dispatchFunction({type: \"REMOVE\", id: id})\n    }\n\n    const cartContext = {\n        items: [],\n        totalAmount: 0,\n        addItem: () => {},\n        removeItem: () => {}\n    };\n\n    return <CartContext.Provider value={cartContext}>\n        {props.children}\n    </CartContext.Provider>\n}\n\nexport default CartContextProvider"]},"metadata":{},"sourceType":"module"}