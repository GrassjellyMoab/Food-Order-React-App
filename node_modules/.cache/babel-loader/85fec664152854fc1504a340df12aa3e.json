{"ast":null,"code":"var _jsxFileName = \"/Users/yanyixue/Desktop/HTML, CSS, JS/Learning react/Food-Order-App/src/components/FoodPortion/FoodContext/FoodContext.js\";\nimport React, { useState } from \"react\"; // to retrieve food & quantity to be added from FoodItem component to Cart component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FoodContext = /*#__PURE__*/React.createContext({\n  updateFoodList: (FoodId, QuantityToAdd) => {},\n  FoodList: {\n    id: 0\n  }\n}); // why we update the state dont immediately affect the cartheaderbutton quantity?\n\nexport const FoodContextProvider = props => {\n  // function to update FoodListstate\n  const updateFoodList = (FoodId, QuantityToAdd) => {\n    setFoodList(prev => {\n      // add quantity to be added to cart\n      // iterate through object to check whether key match id and then update the value\n      for (var i in prev) {\n        if (prev[i].id === FoodId && prev[i].Quantity >= 0) {\n          // if quantity = 0, cannot decrease to -1\n          if (QuantityToAdd === -1 && prev[i].Quantity === 0) {\n            break;\n          } // update quantity of a certain Food in the Cart base on Id\n\n\n          prev[i].Quantity += +QuantityToAdd;\n        }\n      }\n\n      return prev;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(FoodContext.Provider, {\n    value: {\n      updateFoodList: updateFoodList,\n      FoodList: FoodList\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_c = FoodContextProvider;\nexport default FoodContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"FoodContextProvider\");","map":{"version":3,"sources":["/Users/yanyixue/Desktop/HTML, CSS, JS/Learning react/Food-Order-App/src/components/FoodPortion/FoodContext/FoodContext.js"],"names":["React","useState","FoodContext","createContext","updateFoodList","FoodId","QuantityToAdd","FoodList","id","FoodContextProvider","props","setFoodList","prev","i","Quantity","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;;;AACA,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB;AACtCC,EAAAA,cAAc,EAAE,CAACC,MAAD,EAASC,aAAT,KAA2B,CAAE,CADP;AAEtCC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,EAAE,EAAE;AAAN;AAF4B,CAApB,CAApB,C,CAMA;;AACA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAC5C;AACA,QAAMN,cAAc,GAAG,CAACC,MAAD,EAASC,aAAT,KAA2B;AAChDK,IAAAA,WAAW,CAAEC,IAAD,IAAU;AACpB;AACA;AACA,WAAK,IAAIC,CAAT,IAAcD,IAAd,EAAoB;AAClB,YAAIA,IAAI,CAACC,CAAD,CAAJ,CAAQL,EAAR,KAAeH,MAAf,IAAyBO,IAAI,CAACC,CAAD,CAAJ,CAAQC,QAAR,IAAoB,CAAjD,EAAoD;AAClD;AACA,cAAIR,aAAa,KAAK,CAAC,CAAnB,IAAwBM,IAAI,CAACC,CAAD,CAAJ,CAAQC,QAAR,KAAqB,CAAjD,EAAoD;AAClD;AACD,WAJiD,CAKlD;;;AACAF,UAAAA,IAAI,CAACC,CAAD,CAAJ,CAAQC,QAAR,IAAoB,CAACR,aAArB;AACD;AACF;;AACD,aAAOM,IAAP;AACD,KAdU,CAAX;AAeD,GAhBD;;AAmBA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLR,MAAAA,cAAc,EAAEA,cADX;AAELG,MAAAA,QAAQ,EAAEA;AAFL,KADT;AAAA,cAMGG,KAAK,CAACK;AANT;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA/BM;KAAMN,mB;AAiCb,eAAeP,WAAf","sourcesContent":["import React, { useState } from \"react\";\n\n// to retrieve food & quantity to be added from FoodItem component to Cart component\nconst FoodContext = React.createContext({\n  updateFoodList: (FoodId, QuantityToAdd) => {},\n  FoodList: { id: 0 },\n});\n\n\n// why we update the state dont immediately affect the cartheaderbutton quantity?\nexport const FoodContextProvider = (props) => {\n  // function to update FoodListstate\n  const updateFoodList = (FoodId, QuantityToAdd) => {\n    setFoodList((prev) => {\n      // add quantity to be added to cart\n      // iterate through object to check whether key match id and then update the value\n      for (var i in prev) {\n        if (prev[i].id === FoodId && prev[i].Quantity >= 0) {\n          // if quantity = 0, cannot decrease to -1\n          if (QuantityToAdd === -1 && prev[i].Quantity === 0) {\n            break;\n          } \n          // update quantity of a certain Food in the Cart base on Id\n          prev[i].Quantity += +QuantityToAdd;\n        }\n      }\n      return prev;\n    });\n  };\n\n\n  return (\n    <FoodContext.Provider\n      value={{\n        updateFoodList: updateFoodList,\n        FoodList: FoodList,\n      }}\n    >\n      {props.children}\n    </FoodContext.Provider>\n  );\n};\n\nexport default FoodContext;\n"]},"metadata":{},"sourceType":"module"}